[{"/Users/dev/Documents/Projects/learn/magnet-boards/src/App.js":"1","/Users/dev/Documents/Projects/learn/magnet-boards/src/index.js":"2","/Users/dev/Documents/Projects/learn/magnet-boards/src/pages/main/main.component.jsx":"3","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/step1/step1.component.jsx":"4","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/header/header.component.jsx":"5","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/steps/steps.component.jsx":"6","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/footer/footer.component.jsx":"7","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/step0/step0.component.jsx":"8","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/radioType/radioType.component.jsx":"9","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/step2/step2.component.jsx":"10","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/step3/step3.component.jsx":"11"},{"size":146,"mtime":1611083278539,"results":"12","hashOfConfig":"13"},{"size":219,"mtime":1611082766396,"results":"14","hashOfConfig":"13"},{"size":1822,"mtime":1611872987539,"results":"15","hashOfConfig":"13"},{"size":1507,"mtime":1611872569682,"results":"16","hashOfConfig":"13"},{"size":388,"mtime":1611777545838,"results":"17","hashOfConfig":"13"},{"size":1060,"mtime":1611873300574,"results":"18","hashOfConfig":"13"},{"size":1400,"mtime":1611782485353,"results":"19","hashOfConfig":"13"},{"size":1775,"mtime":1611873135632,"results":"20","hashOfConfig":"13"},{"size":841,"mtime":1611781930302,"results":"21","hashOfConfig":"13"},{"size":4103,"mtime":1612210922293,"results":"22","hashOfConfig":"13"},{"size":2524,"mtime":1612212388937,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n7m2st",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dev/Documents/Projects/learn/magnet-boards/src/App.js",[],"/Users/dev/Documents/Projects/learn/magnet-boards/src/index.js",[],"/Users/dev/Documents/Projects/learn/magnet-boards/src/pages/main/main.component.jsx",[],"/Users/dev/Documents/Projects/learn/magnet-boards/src/components/step1/step1.component.jsx",[],"/Users/dev/Documents/Projects/learn/magnet-boards/src/components/header/header.component.jsx",["48"],"/Users/dev/Documents/Projects/learn/magnet-boards/src/components/steps/steps.component.jsx",[],"/Users/dev/Documents/Projects/learn/magnet-boards/src/components/footer/footer.component.jsx",[],"/Users/dev/Documents/Projects/learn/magnet-boards/src/components/step0/step0.component.jsx",[],"/Users/dev/Documents/Projects/learn/magnet-boards/src/components/radioType/radioType.component.jsx",["49"],"import React, { Component, Fragment } from 'react';\nimport './radioType.styles.scss';\n\nexport default class RadioType extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render = () => {\n        const { image, name, price, id } = this.props;\n\n        return (\n            <Fragment>\n                <input\n                    value={ id }\n                    type=\"radio\"\n                    name=\"type\"\n                    id={ id }\n                    onChange={ this.props.handleChange }\n                />\n                <label className=\"type__wrapper\" checked htmlFor={ id }>\n                    <h3 className=\"type__title\">{ name }</h3>\n                    <img className=\"type__image\" src={ image } alt={ name } />\n                </label>\n            </Fragment>\n        );\n    }\n}","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/step2/step2.component.jsx",["50"],"import React, { Component, Fragment } from 'react';\nimport './step2.styles.scss';\n\nimport image1 from './image1.jpg';\nimport image2 from './image2.jpg';\nimport image3 from './image3.jpg';\n\nimport { ImageCropper } from \"react-bootstrap-image-cropper\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nexport default class Step2 extends Component {\n    constructor(props) {\n        super(props);\n\n        this.backgrounds = [\n            {\n                id: 1,\n                image: image1,\n                price: 50,\n            },\n            {\n                id: 2,\n                image: image2,\n                price: 100,\n            },\n            {\n                id: 3,\n                image: image3,\n                price: 75,\n            }\n        ];\n\n        this.state = {\n            selected: 1,\n        };\n\n        this.fileRef = React.createRef();\n    }\n\n    handlePictureUpload = (pictureFiles, pictureDataURLs) => {\n        this.props.handlePicture({\n            id: 0,\n            image: pictureDataURLs[0],\n            price: 250,\n        });\n\n        this.setState({\n            selected: 0\n        });\n    }\n\n    handlePictureChange = (event) => {\n        const { backgrounds } = this;\n        const selectedBackground = backgrounds.filter((background) => background.id === +event.currentTarget.value);\n\n        this.setState({\n            selected: selectedBackground[0].id\n        });\n\n        this.props.handlePicture(selectedBackground[0]);\n        this.fileRef.current = null;\n    }\n\n    handleChange = (croppedFile) => {\n        if (!croppedFile) return;\n\n        const reader = new FileReader();\n        reader.readAsDataURL(croppedFile);\n        reader.onloadend = () => {\n            var base64data = reader.result;\n\n            this.props.handlePicture({\n                id: 0,\n                image: base64data,\n                price: 250,\n            });\n\n            this.setState({\n                selected: 0\n            });\n        }\n    }\n\n    render = () => {\n        const { backgrounds } = this;\n\n        return (\n            <Fragment ref={this.ref}>\n                <article className=\"content\">\n                    <h1 className=\"content__title\">Фон дошки</h1>\n\n                    <section className=\"type type--background\">\n\n                        <div className={`type__wrapper ${0 === +this.state.selected ? 'checked' : ''}`}>\n                            <ImageCropper\n                                fileRef={this.fileRef}\n                                onChange={this.handleChange}\n                                outputOptions={{ mimeType: 'image/png' }}\n                                previewOptions={{ children: 'Обрати зображення' }}\n                            />\n                        </div>\n\n                        {backgrounds.map((background, index) => {\n                            const { id, image, price } = background;\n                            const isChecked = +id === +this.state.selected ? true : false;\n                            return (\n                                <Fragment key={id}>\n                                    <input\n                                        value={id}\n                                        type=\"radio\"\n                                        name=\"type\"\n                                        id={id}\n                                        checked={isChecked}\n                                        onChange={this.handlePictureChange}\n                                    />\n                                    <label className=\"type__wrapper\" checked htmlFor={id}>\n                                        <img className=\"type__image\" src={image} alt={`${id} background`} />\n                                        <img className=\"type__image type__image--grid\" src={this.props.data.type.image} alt=\"apple\" />\n                                    </label>\n                                </Fragment>\n                            );\n                        })}\n                    </section>\n                </article>\n            </Fragment>\n        )\n    }\n};\n","/Users/dev/Documents/Projects/learn/magnet-boards/src/components/step3/step3.component.jsx",[],{"ruleId":"51","severity":1,"message":"52","line":1,"column":28,"nodeType":"53","messageId":"54","endLine":1,"endColumn":36},{"ruleId":"51","severity":1,"message":"55","line":11,"column":30,"nodeType":"53","messageId":"54","endLine":11,"endColumn":35},{"ruleId":"51","severity":1,"message":"55","line":104,"column":48,"nodeType":"53","messageId":"54","endLine":104,"endColumn":53},"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'price' is assigned a value but never used."]